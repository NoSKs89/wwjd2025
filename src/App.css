:root {
  --fontColor1: white;
  --magaColor: #f00808;
}

body {
  font-family: 'Arial', sans-serif;
  overflow-x: hidden;
}

.mobileCardText {
  font-size: '0.15em';
}

.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}

.timeline-container {
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100vh;
  -ms-overflow-style: none;
  scrollbar-width: none;
}

/* Hide scrollbar for Chrome, Safari and Opera */
body::-webkit-scrollbar {
  display: none;
}

.timeline-container.mobile {
  min-height: none;
}

.event-card-container {
  transition: transform 0.3s ease, filter 0.3s ease;
  padding: 0 0 1vh 0;
  min-height: 0.5vh;
}

.event-card-container.mobile {
  transform: scale(1);
  overflow: none !important;
  padding-bottom: none !important;
  padding-top: none !important;
  margin-bottom: none !important;
  margin-top: none !important;
}

.event-card-container.active {
  /* transform: scale(1.1); */
  /* transform: scale(1);
  filter: none; */
}

.event-card-container.inactive {
  /* transform: scale(1); */
  /* filter: blur(1.2px); */
}

.shimmer-typography {
  position: relative;
  overflow: hidden;
}

.shimmer-typography::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 50%;
  height: 100%;
  background: linear-gradient(to right,
      transparent,
      rgba(255, 255, 255, 0.4),
      transparent);
  animation: shimmer 3s linear infinite, fadeIn 0.5s ease-in-out;
}



@keyframes shimmer {
  100% {
    left: 100%;
    /* Move the shimmer across the text */
  }
}

@keyframes fadeIn {
  0% {
    opacity: 0;
    transform: translateY(20px);
  }

  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes holyRadiance {
  0% {
    filter: drop-shadow(0 0 8px rgba(255, 255, 150, 0.7));
    /* Restore border */
    border: 5px solid rgba(255, 255, 150, 0.8);
  }

  50% {
    filter: drop-shadow(0 0 15px rgba(255, 255, 180, 0.8));
    /* Restore border */
    border: 5px solid rgba(255, 255, 220, 0.9);
  }

  100% {
    filter: drop-shadow(0 0 12px rgba(255, 255, 200, 0.9));
    /* Restore border */
    border: 5px solid rgba(255, 255, 250, 1);
  }
}

@keyframes holyRadianceMobile {
  /* Revert to original box-shadow and border */
  0% {
    box-shadow: 0 0 2.5px rgba(255, 255, 150, 0.8),
      0 0 7.5px rgba(255, 255, 200, 0.6),
      0 0 15px rgba(255, 255, 255, 0.4);
    border: 2px solid rgba(255, 255, 150, 0.8);
  }

  50% {
    box-shadow: 0 0 5px rgba(255, 255, 180, 0.9),
      0 0 12.5px rgba(255, 255, 220, 0.7),
      0 0 25px rgba(255, 255, 255, 0.5);
    border: 2px solid rgba(255, 255, 220, 0.9);
  }

  100% {
    box-shadow: 0 0 7.5px rgba(255, 255, 200, 1),
      0 0 17.5px rgba(255, 255, 250, 0.8),
      0 0 30px rgba(255, 255, 255, 0.6);
    border: 2px solid rgba(255, 255, 250, 1);
  }
}

.holy-border {
  position: relative;
  padding: 20px;
  background: white;
  border-radius: 10px;
  animation: holyRadiance 2s infinite alternate ease-in-out;
}

.holy-border-mobile {
  position: relative;
  padding: 10px;
  background: white;
  border-radius: 15px;
  animation: holyRadianceMobile 1.5s infinite alternate ease-in-out;
}

.evil-border {
  position: relative;
  padding: 20px;
  border-radius: 10px;
  background-color: #222;
  color: #fff;
  /* animation: smoky-border 3s infinite; */
}

.evil-border::before {
  content: '';
  position: absolute;
  top: -5px;
  left: -5px;
  right: -5px;
  bottom: -5px;
  border-radius: 10px;
  /* background: rgba(0, 0, 0, 0.6); */
  z-index: -1;
}

@keyframes smoky-border {
  0% {
    opacity: 0.6;
    box-shadow: 0 0 20px rgba(255, 0, 0, 0.6), 0 0 20px rgba(255, 0, 0, 0.4);
  }

  50% {
    opacity: 0.8;
    box-shadow: 0 0 35px rgba(255, 0, 0, 0.8), 0 0 40px rgba(40, 31, 3, 0.5);
  }

  100% {
    opacity: 0.6;
    box-shadow: 0 0 20px rgba(255, 0, 0, 0.6), 0 0 20px rgba(255, 0, 0, 0.4);
  }
}

.sticky-center {
  position: sticky;
  top: 50vh;
  transform: translateY(-50%);
  transition: top 0.3s ease;
}

.shader-background {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  /* background: rgba(0, 0, 0, 0.5); */ 
  opacity: 0; /* Default hidden */
  pointer-events: none;
  z-index: -1; 
  /* transition: opacity 1s ease-in-out; REMOVED base transition */
}

/* REMOVED old fade-in/out classes */
/* .shader-background.fade-in { opacity: 1; } */
/* .shader-background.fade-out { opacity: 0; } */

/* NEW class-based transitions */
.shader-background.shader-fade-in {
  opacity: 1;
  transition: opacity 0.1s ease-out; /* FAST fade-in */
}

.shader-background.shader-fade-out {
  opacity: 0;
  transition: opacity 1.0s ease-in-out; /* SLOW fade-out */
}

/* .shader-fade-idle will just use the base opacity: 0 */

.inactive-text {
  opacity: 1;
  transition: opacity 0.8s ease-in-out;
}

.active-text {
  opacity: 1;
  transition: opacity 0.8s ease-in-out;
}

.inactive-text.hidden {
  opacity: 0;
}

.active-text.hidden {
  opacity: 0;
}

/* ==================
   Timeline Background
   ================== */

@keyframes waveEffect {
  0% {
    background-position-y: 0%;
  }
  50% {
    background-position-y: 15%; /* Adjust max wave offset */
  }
  100% {
    background-position-y: 0%;
  }
}

.noise-filter {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -2; /* CHANGE: Behind shader */
  pointer-events: none;
  /* Dark, dreary gradient with mauve/purple */
  background: linear-gradient(170deg, 
    #0d0d0d 0%, 
    #1a1a1e 30%, 
    #3b2a3f 55%, /* Mauve/Purpleish stop */
    #212126 75%, 
    #371313 100%
  );
  background-size: 100% 200%; /* Ensure gradient is large enough to move */
  background-attachment: fixed;
  /* Removed background-position linked to variable */
  /* Apply wave animation to gradient */
  animation: waveEffect 7s ease-in-out infinite alternate;
  /* Removed transition */
  overflow: hidden;
  opacity: 1; /* Default opacity */
  transition: opacity 1.5s ease-out; /* Default transition for SLOW FADE-IN after shader */
}

.noise-filter::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url("data:image/svg+xml,%3Csvg viewBox='0 0 300 300' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.85' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)'/%3E%3C/svg%3E");
  opacity: 0.03; /* Default noise opacity */
  pointer-events: none;
  background-attachment: fixed;
  background-size: auto; /* Or specify size if needed */
  /* Removed background-position linked to variable */
  /* Apply wave animation to noise (slightly faster/offset) */
  animation: waveEffect 18s linear infinite alternate-reverse;
  /* Removed transition */
  transition: opacity 1.5s ease-out; /* Default transition for SLOW FADE-IN after shader */
}

/* --- Mobile Transition --- */

/* FAST fade-out for the main filter when shader appears */
.noise-filter.noise-filter--mobile-transition {
  opacity: 0; /* Target opacity during transition */
  transition: opacity 0.1s ease-out; /* FAST Fade-out duration */
}

/* FAST fade-out for the ::after noise layer when shader appears */
.noise-filter.noise-filter--mobile-transition::after {
  opacity: 0; /* Target opacity during transition */
  transition: opacity 0.1s ease-out; /* FAST Fade-out duration */
}

/* Ensure shader transition is correct */
.shader-background {
  /* ... other styles ... */
  transition: opacity 2s ease-in-out; /* Keep shader fade duration */
  opacity: 0;
  /* ... */
}

/* Ensure the main timeline container doesn't have a conflicting background */
.timeline-container {
  /* position: relative; /* Already set */
  /* background-color: transparent !important; /* Ensure no override */ 
}